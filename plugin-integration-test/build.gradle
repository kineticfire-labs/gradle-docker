/*
 * (c) Copyright 2023-2025 gradle-docker Contributors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Plugin Integration Tests Root Project
 * 
 * This project orchestrates all integration tests that demonstrate real usage patterns
 * of the gradle-docker plugin including:
 * - Docker operations (build, tag, save, publish) in docker/ subproject
 * - Docker Compose orchestration in compose/ subproject (future)
 * - Application JAR building in app/ subproject (shared dependency)
 * 
 * Each major subproject represents a category of integration tests.
 */

// No plugins needed at root level - subprojects handle their own builds

group = 'com.kineticfire.gradle.docker.integration'
version = '1.0.0'

// Aggregate task to run all integration tests
tasks.register('runAll') {
    description = 'Run all integration tests (Docker and Compose)'
    group = 'verification'
    
    // Ensure app is built first, then run all integration test categories
    dependsOn ':app:build'
    dependsOn ':docker:runAll'
    
    // Future compose integration tests:
    // dependsOn ':compose:runAll'
}

// Aggregate cleanup task  
tasks.register('cleanAll') {
    description = 'Clean all integration test projects'
    group = 'build'
    
    dependsOn ':app:clean'
    dependsOn ':docker:cleanAll'
    
    // Future compose integration tests:
    // dependsOn ':compose:cleanAll'
}

