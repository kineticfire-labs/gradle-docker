/*
 * (c) Copyright 2023-2025 gradle-docker Contributors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Integration test that tests:
 *   - Build Image Features
 *       - number of images = 1
 *       - build image only vs follow-on: build image only
 *       - naming style: Image Name Mode: imageName, tag(s)
 *       - build args
 *           - number of build args > 1
 *           - number of build args w/ put > 1
 *       - labels
 *           - number of labels > 1
 *           - number of labels w/ put > 1
 *       - dockerfile = default
 *   - Tag Features
 *       - number of tags > 1
 *   - Save Features
 *       - save = none
 *   - Publish Features
 *       - publish = none
 */

plugins {
    id 'groovy'
    id 'com.kineticfire.gradle.gradle-docker' version '1.0.0'
}

group = 'com.kineticfire.gradle.docker.integration'
version = '1.0.0'

docker {
    images {
        timeServer {

            contextTask = tasks.register('prepareScenario1TimeServerContext', Copy) {
                group = 'docker'
                description = 'Prepare Docker build context for time server image'
                into layout.buildDirectory.dir('docker-context/timeServer')
                from('src/main/docker')
                from(file('../../app/build/libs')) {
                    include 'app-*.jar'
                    rename { String fileName -> "app-${project.version}.jar" }
                }
                dependsOn ':app:jar'
            }

            buildArgs.put("JAR_FILE", "app-${project.version}.jar")
            buildArgs.put("BUILD_VERSION", project.version)

            labels.put("org.opencontainers.image.version", project.version)
            labels.put("maintainer", "team@kineticfire.com")

            // dockerfile will default to 'build/docker-context/timeServer/Dockerfile'

            imageName.set('scenario1-time-server')
            tags.set([
                    "1.0.0",
                    "latest"
            ])

            // no save
            // no publish
        }
    }
}

// ============================================================================
// INTEGRATION TEST VERIFICATION TASKS
// ============================================================================

// Apply the reusable Docker image testing plugin from buildSrc
apply from: "$rootDir/buildSrc/src/main/groovy/docker-image-testing.gradle"

// Register Docker image clean and verify tasks for this integration test
registerBuildWorkflowTasks(project, [
    'scenario1-time-server:1.0.0',
    'scenario1-time-server:latest'
])

// Task that runs complete integration test workflow
tasks.register('integrationTest') {
    description = 'Run complete Docker integration test: clean → build → verify'
    group = 'verification'
    dependsOn 'cleanDockerImages'
    dependsOn 'dockerBuild'  
    dependsOn 'verifyDockerImages'
    
    // Ensure proper task ordering
    tasks.dockerBuild.mustRunAfter tasks.cleanDockerImages
    tasks.verifyDockerImages.mustRunAfter tasks.dockerBuild
}
