/*
 * (c) Copyright 2023-2025 gradle-docker Contributors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Integration test that tests:
 *   - Build Image Features
 *       - number of images = 1
 *       - build image + follow-on save and/or publish
 *       - naming style: Image Name Mode: namespace, imageName, 2 tags
 *       - build args
 *           - number of build args = 1
 *           - number of build args w/ put = 1
 *       - labels
 *           - number of labels = 1
 *           - number of labels w/ put = 1
 *       - dockerfile = specify by name
 *   - Tag Features
 *       - number of tags = 1
 *   - Save Features
 *       - none
 *   - Publish Features
 *       - publish = 1 tag
 *       - publish to private registry without authentication
 *       - Image Name Mode: imageName, tag(s)
 */

plugins {
    id 'groovy'
    id 'com.kineticfire.gradle.gradle-docker' version '1.0.0'
}

import static com.kineticfire.gradle.docker.model.SaveCompression.NONE

group = 'com.kineticfire.gradle.docker.integration'
version = '1.0.0'

docker {
    images {
        timeServer {

            contextTask = tasks.register('prepareScenario2TimeServerContext', Copy) {
                group = 'docker'
                description = 'Prepare Docker build context for time server image'
                into layout.buildDirectory.dir('docker-context/timeServer')
                from('src/main/docker')
                
                // Capture version as string during configuration to avoid closure access at execution
                def versionString = project.version.toString()
                from(file('../../app/build/libs')) {
                    include 'app-*.jar'
                    rename { String fileName -> "app-${versionString}.jar" }
                }
                dependsOn ':app:jar'
            }

            dockerfileName = 'CustomDockerfile' // becomes 'build/docker-context/timeServer/CustomDockerfile'

            buildArgs.put("JAR_FILE", "app-${project.version}.jar")

            labels.put("org.opencontainers.image.version", project.version.toString())

            namespace.set('scenario2')
            imageName.set('scenario2-time-server')
            tags.set(["latest"])

            save {
                outputFile.set(layout.buildDirectory.file("docker-images/scenario2-time-server-latest.tar"))
                compression.set(NONE)
            }

            publish {
                to('testRegistry') {
                    registry.set('localhost:5201')
                    imageName.set('scenario2-time-server')
                    publishTags(['latest'])
                }
            }
        }
    }
}

// ============================================================================
// INTEGRATION TEST VERIFICATION TASKS
// ============================================================================

// Apply the reusable Docker image testing plugin from buildSrc
apply from: "$rootDir/buildSrc/src/main/groovy/docker-image-testing.gradle"

// Apply the registry management plugin from buildSrc
apply plugin: RegistryManagementPlugin

// Configure test registry using the plugin
withTestRegistry('test-registry-scenario2', 5201) {
    // Registry will be configured with default settings
}

// Register Docker image clean and verify tasks for this integration test
registerBuildWorkflowTasks(project, ['scenario2/scenario2-time-server:latest'])

// Register saved image verification task since this scenario tests save functionality
registerVerifySavedImagesTask(project, ['build/docker-images/scenario2-time-server-latest.tar'])

// Register registry image verification task since this scenario tests publish functionality
registerVerifyRegistryImagesTask(project, ['localhost:5201/scenario2-time-server:latest'])


// Task that runs complete integration test workflow
tasks.register('integrationTest') {
    description = 'Run complete Docker integration test: clean → build → save → publish → verify'
    group = 'verification'

    // Dependencies
    dependsOn 'startTestRegistries'
    dependsOn 'cleanDockerImages'
    dependsOn 'dockerImages'
    dependsOn 'verifyDockerImages'
    dependsOn 'verifySavedDockerImages'
    dependsOn 'verifyRegistryDockerImages'
    dependsOn 'stopTestRegistries'
}

// Configure task ordering without direct task references
tasks.named('cleanDockerImages') { mustRunAfter 'startTestRegistries' }
tasks.named('dockerImages') { mustRunAfter 'cleanDockerImages' }
tasks.named('verifyDockerImages') { mustRunAfter 'dockerImages' }
tasks.named('verifySavedDockerImages') { mustRunAfter 'dockerImages' }
tasks.named('verifyRegistryDockerImages') { mustRunAfter 'dockerImages' }
tasks.named('stopTestRegistries') { mustRunAfter 'verifyRegistryDockerImages' }