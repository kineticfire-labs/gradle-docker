/*
 * (c) Copyright 2023-2025 gradle-docker Contributors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java'
    id 'application'
    id 'com.kineticfire.gradle.gradle-docker' version '1.0.0'
}

group = 'com.kineticfire.gradle.docker.integration'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    mainClass = 'com.kineticfire.gradle.docker.integration.IntegrationTestApp'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.slf4j:slf4j-api:2.0.9'
    implementation 'ch.qos.logback:logback-classic:1.4.11'
    
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
    useJUnitPlatform()
}

// Configure Docker plugin
docker {
    images {
        integrationApp {
            context = file('.')
            dockerfile = file('Dockerfile')
            tags = [
                'integration-test-app:latest',
                'integration-test-app:1.0.0'
            ]
            buildArgs = [
                'JAR_FILE': 'app.jar',
                'BUILD_VERSION': project.version.toString(),
                'BUILD_TIME': new Date().format('yyyy-MM-dd HH:mm:ss')
            ]
        }
    }
}

// Configure Docker Compose orchestration plugin
dockerOrch {
    composeStacks {
        integrationTest {
            composeFile = file('docker-compose.test.yml')
            projectName = 'gradle-docker-integration'
            envFile = file('.env')
            profiles = ['test']
        }
        
        development {
            composeFile = file('docker-compose.dev.yml')
            projectName = 'gradle-docker-dev'
            profiles = ['dev', 'monitoring']
        }
    }
}

// Custom task to prepare for Docker build
tasks.register('prepareDocker', Copy) {
    dependsOn 'jar'
    from layout.buildDirectory.file("libs/${project.name}-${project.version}.jar")
    into layout.projectDirectory
    rename { 'app.jar' }
}

// Make docker build depend on jar preparation
// tasks.named('dockerBuildIntegrationApp') {
//     dependsOn 'prepareDocker'
// }

// Integration test task that uses compose
tasks.register('integrationTest') {
    description = 'Run integration tests using Docker Compose'
    group = 'verification'
    
    dependsOn 'dockerBuildIntegrationApp'
    dependsOn 'composeUpIntegrationTest'
    
    doLast {
        println "Integration tests completed successfully!"
        println "Application is running in Docker container"
        println "Use 'gradle composeDownIntegrationTest' to stop the stack"
    }
    
    finalizedBy 'composeDownIntegrationTest'
}

// Custom task to validate Docker operations
tasks.register('validateDockerOperations') {
    description = 'Validate core Docker plugin operations'
    group = 'verification'
    
    // dependsOn 'dockerBuildIntegrationApp'
    
    doLast {
        println "✓ Plugin configuration loaded successfully"
        
        // Additional validation can be added here
        println "✓ Docker tasks should be available" 
        println "✓ Integration test validation passed"
    }
}