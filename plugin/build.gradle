/*
 * (c) Copyright 2023-2025 gradle-docker Contributors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * KineticFire Labs: https://labs.kineticfire.com/
 *     project site: https://github.com/kineticfire-labs/gradle-docker/
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'

    // Apply the Groovy plugin to add support for Groovy
    id 'groovy'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral( )
}

dependencies {
    implementation libs.groovy
    testImplementation libs.bundles.testing
    testRuntimeOnly libs.bundles.testing.runtime
}

group = 'com.kineticfire.gradle.docker' // todo should be named .gradle-docker?
version = '1.0.0'


gradlePlugin {
    // Define the plugins
    plugins {
        dockerPlugin {
            id = 'com.kineticfire.docker' //todo should be GRADLE.docker-system?
            displayName = 'KineticFire Labs Gradle Docker'
            description = 'Docker interaction'
            implementationClass = 'com.kineticfire.gradle.docker.DockerPlugin'
        }
        dockerSystemPlugin {
            id = 'com.kineticfire.docker-system' //todo should be GRADLE.docker-system?
            displayName = 'KineticFire Labs Gradle Docker-System'
            description = 'Docker compose, swarm, and script support'
            implementationClass = 'com.kineticfire.gradle.docker.DockerSystemPlugin'
        }
    }
}

jar {
    archiveBaseName = 'gradle-docker'

    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'KineticFire Labs'
        )
    }

    // Reproducible builds
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}


// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

configurations.functionalTestImplementation.extendsFrom( configurations.testImplementation )

// Add a task to run the functional tests
tasks.register( 'functionalTest', Test ) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform( )
}

gradlePlugin.testSourceSets( sourceSets.functionalTest )

tasks.named( 'check' ) {
    // Run the functional tests as part of `check`
    dependsOn( tasks.functionalTest )
}

tasks.named( 'test' ) {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform( )
}

   

// Added so that tests can be excluded on the command line.  For example, DockerUtilsTest.groovy require a lot of time to run.  To exclude:
//    gradle clean test -PexcludeTests=**/*DockerUtilsTest*
test {
    if ( project.hasProperty( 'excludeTests' ) ) {
        exclude project.property( 'excludeTests' )
    }
}
