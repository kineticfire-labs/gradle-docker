/*
 * (c) Copyright 2023-2025 gradle-docker Contributors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * KineticFire Labs: https://labs.kineticfire.com/
 *     project site: https://github.com/kineticfire-labs/gradle-docker/
 */

plugins {
    id 'groovy'
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '1.2.1'
    id 'jacoco'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    // Docker Java Client
    implementation 'com.github.docker-java:docker-java-core:3.3.4'
    implementation 'com.github.docker-java:docker-java-transport-httpclient5:3.3.4'
    
    // exec library for Docker Compose (placeholder - will implement in Phase 2)
    // implementation 'com.kineticfire.labs:exec:1.0.0'
    
    // JSON processing
    implementation 'com.fasterxml.jackson.core:jackson-core:2.16.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.0'
    
    // Gradle API
    compileOnly gradleApi()
    compileOnly localGroovy()
    
    // Testing
    testImplementation platform('org.spockframework:spock-bom:2.4-M4-groovy-4.0')
    testImplementation 'org.spockframework:spock-core'
    testImplementation 'org.spockframework:spock-junit4'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly 'org.junit.platform:junit-platform-engine'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'
    testImplementation gradleTestKit()
    testImplementation 'junit:junit:4.13.2'
    
    // Functional testing (will be configured by testing suites)
    // Note: functionalTest dependencies configured by testing.suites
}

group = 'com.kineticfire.gradle'
version = '1.0.0'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}


gradlePlugin {
    website = 'https://github.com/kineticfire-labs/gradle-docker'
    vcsUrl = 'https://github.com/kineticfire-labs/gradle-docker'
    
    plugins {
        gradleDockerPlugin {
            id = 'com.kineticfire.gradle.gradle-docker'
            implementationClass = 'com.kineticfire.gradle.docker.GradleDockerPlugin'
            displayName = 'Gradle Docker Plugin'
            description = 'Provides Docker image build/publish and Compose orchestration for Gradle projects'
            tags = ['docker', 'containers', 'docker-compose', 'testing']
        }
    }
}

jar {
    archiveBaseName = 'gradle-docker'

    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'KineticFire Labs'
        )
    }

    // Reproducible builds
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

// Configure functional test source set manually to work around TestKit issues
sourceSets {
    functionalTest {
        groovy.srcDir 'src/functionalTest/groovy'
        resources.srcDir 'src/functionalTest/resources'
        compileClasspath += sourceSets.main.output
        runtimeClasspath += output + compileClasspath
    }
}

configurations {
    functionalTestImplementation.extendsFrom implementation
    functionalTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    functionalTestImplementation platform('org.spockframework:spock-bom:2.4-M4-groovy-4.0')
    functionalTestImplementation 'org.spockframework:spock-core'
    functionalTestImplementation gradleTestKit()
    functionalTestRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    functionalTestRuntimeOnly 'org.junit.vintage:junit-vintage-engine'
}

//jacocoTestReport {
//    reports {
//        xml.required = true // Enable XML report generation
//        html.enabled = true // Ensure HTML report is also generated
//    }
//    // Optional: Ensure tests run before report generation
//    dependsOn test
//}

tasks.test {
    finalizedBy(tasks.jacocoTestReport) // Report is always generated after tests run
}

// todo
//After successful execution, the generated reports will be found in your project's build/reports/jacoco/test directory
// (or the path you configured). Open the index.html file in your browser to view the interactive HTML report. If you
// enabled XML reports, you will also find a jacocoTestReport.xml file in the same location.

tasks.register('functionalTest', Test) {
    description = 'Runs functional tests'
    group = 'verification'
    
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
    
    dependsOn tasks.pluginUnderTestMetadata
}

tasks.named('check') {
    dependsOn tasks.functionalTest
}

tasks.named('test') {
    // Use JUnit Platform for Spock tests
    useJUnitPlatform()
}

// Added so that tests can be excluded on the command line.  For example, DockerUtilsTest.groovy require a lot of time to run.  To exclude:
//    gradle clean test -PexcludeTests=**/*DockerUtilsTest*
test {
    if ( project.hasProperty( 'excludeTests' ) ) {
        exclude project.property( 'excludeTests' )
    }
}
